// -------------------- plug-ins -------------------- //

plugins {
	id 'groovy'
	id 'java-gradle-plugin'
	id 'maven-publish'
	id 'com.gradle.plugin-publish' version '0.16.0'
}

gradlePlugin {
	plugins {
		softicarCodeValidationPlugin {
			id = 'com.softicar.gradle.code.validation'
			displayName = 'SoftiCAR Code Validation Plugin'
			description = 'This plugin enables a project to execute self-contained code validation logic, i.e. code validation logic that is implemented in the project itself or in one of its dependencies.'
			implementationClass = 'com.softicar.gradle.code.validation.plugin.SofticarCodeValidationPlugin'
		}
		softicarDependencyValidationPlugin {
			id = 'com.softicar.gradle.dependency.validation'
			displayName = 'SoftiCAR Dependency Validation Plugin'
			description = 'This plugin is useful to validate manual dependency conflict resolutions, e.g. by failing the build in case of accidential downgrades of dependencies. See the Javadoc of the plugin class for more details.'
			implementationClass = 'com.softicar.gradle.dependency.validation.plugin.SofticarDependencyValidationPlugin'
		}
		softicarJavaLibraryPlugin {
			id = 'com.softicar.gradle.java.library'
			displayName = 'SoftiCAR Java Library Plugin'
			description = 'This plugin applies the Gradle Java Library plug-in and applies some tweaks.'
			implementationClass = 'com.softicar.gradle.java.library.plugin.SofticarJavaLibraryPlugin'
		}
		softicarSeleniumGridPlugin {
			id = 'com.softicar.gradle.selenium.grid'
			displayName = 'SoftiCAR Selenium Grid Plugin'
			description = 'This plugin is useful for projects executing unit tests based on the Selenium (https://www.selenium.dev/) framework. See the Javadoc of the plugin class for more details.'
			implementationClass = 'com.softicar.gradle.selenium.grid.plugin.SofticarSeleniumGridPlugin'
		}
		softicarTestLoggerPlugin {
			id = 'com.softicar.gradle.test.logger'
			displayName = 'SoftiCAR Test Logger Plugin'
			description = 'This plugin can be used to debug problems (e.g. concerning performance or determinism) during test execution.'
			implementationClass = 'com.softicar.gradle.test.logger.plugin.SofticarTestLoggerPlugin'
		}
	}
}

// -------------------- dependencies -------------------- //

repositories {
	if(project.hasProperty('com.softicar.maven.proxies')) {
		for(proxy: project['com.softicar.maven.proxies'].split("\\s")) {
			println "Using Maven proxy: $proxy"
			maven {
				allowInsecureProtocol true
				url proxy
			}
		}
	} else {
		mavenCentral()
		maven { url 'https://plugins.gradle.org/m2/' }
	}
}

dependencies {
	implementation gradleApi()
	implementation localGroovy()

	testImplementation "junit:junit:4.13.1"
}

task allDependencies(type: DependencyReportTask) {
	// nothing
}

// -------------------- Eclipse -------------------- //

// This provides the sources and Javadoc for the Gradle API.
// https://stackoverflow.com/questions/22694199/gradle-api-sources-and-doc-when-writing-gradle-plugins
plugins.withType(EclipsePlugin) {
	plugins.withType(JavaBasePlugin) {
		eclipse {
			classpath {
				file {
					whenMerged { classpath ->
						String gradleHome = gradle.getGradleHomeDir()
							.absolutePath
							.replace(File.separator, '/')
						String gradleSourceDirectory = "${gradleHome}/src"
						classpath.entries.each { entry ->
							if (entry in org.gradle.plugins.ide.eclipse.model.AbstractLibrary
									&& entry.library.path.contains('generated-gradle-jars')) {
								entry.sourcePath =
									new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory()
										.fromPath(gradleSourceDirectory)
							}
						}
					}
				}
			}
		}
	}
}

// -------------------- compile -------------------- //

sourceCompatibility = "15"
targetCompatibility = "15"
compileJava {
	options.encoding = "UTF-8"
}

// -------------------- publish -------------------- //

task([type: Jar, dependsOn: classes], "sourcesJar") {
	from sourceSets.main.allSource
	archiveClassifier = "sources"
}

task([type: Jar, dependsOn: javadoc], "javadocJar") {
	from javadoc.destinationDir
	archiveClassifier = "javadoc"
}

pluginBundle {
	website = 'https://github.com/SoftiCAR/com.softicar.gradle.plugins'
	vcsUrl = 'https://github.com/SoftiCAR/com.softicar.gradle.plugins'
	tags = ['dependencies', 'java', 'logging', 'selenium', 'softicar', 'validation']
}
